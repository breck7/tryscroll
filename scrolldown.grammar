tooling A function generates this Scrolldown grammar by combining all files in the grammars folder.
tooling
 Related work
 CSS is great for text selector ideas: https://www.w3schools.com/cssref/css_selectors.asp
 Roff has a lot of related markup ideas: https://www.systutorials.com/docs/linux/man/7-groff_man/
classNameCell
 highlightScope constant
htmlIdCell
 extends idCell
dateCell
 highlightScope string
integerCell
 highlightScope constant.numeric
permalinkCell
 highlightScope string
anyCell
urlCell
 highlightScope constant.language
keywordCell
 highlightScope keyword
textCell
 highlightScope string
idCell
 highlightScope string
blankCell
codeCell
 highlightScope comment
commentCell
 highlightScope comment
bulletPointCell
 highlightScope keyword
aftertextTextNode
 catchAllCellType textCell
 boolean isTextNode true
abstractScrollNode
 abstract
 cells keywordCell
aftertextNode
 description Text followed by markup commands.
 extends abstractScrollNode
 catchAllNodeType aftertextTextNode
 inScope abstractAftertextDirectiveNode abstractAftertextAttributeNode
 crux aftertext
 example
  aftertext
   Hello brave new world
   link home.com new
   bold brave new
   underline new world
   strikethrough wor
 javascript
  get markupInserts() {
   const { originalText } = this
   return this.filter(node => node.isMarkupNode)
    .map(node => node.getInserts(originalText))
    .filter(i => i)
    .flat()
  }
  get originalText() {
   return this.filter(node => node.isTextNode)
    .map(node => node.toString())
    .join("\n")
  }
  get text() {
   const { originalText, markupInserts } = this
   let adjustment = 0
   let newText = originalText
   // If multiple tags start at same index, the tag that closes first should start last. Otherwise HTML breaks.
   markupInserts.sort((a, b) => (a.index === b.index ? b.endIndex - a.endIndex : a.index - b.index))
   markupInserts.forEach(insertion => {
    insertion.index += adjustment
    const consumeStartCharacters = insertion.consumeStartCharacters ?? 0
    const consumeEndCharacters = insertion.consumeEndCharacters ?? 0
    newText = newText.slice(0, insertion.index - consumeEndCharacters) + insertion.string + newText.slice(insertion.index + consumeStartCharacters)
    adjustment += insertion.string.length - consumeEndCharacters - consumeStartCharacters
   })
   return newText
  }
  compile() {
   return `<p ${this.divAttributes}class="scrollParagraphComponent">${this.text}</p>`
  }
  get divAttributes() {
   const attrs = this.filter(node => node.isAttributeNode)
   return attrs.length ? attrs.map(node => node.divAttributes).join(" ") + " " : ""
  }
loremIpsumNode
 extends aftertextNode
 description Generate dummy text.
 crux loremIpsum
 catchAllCellType integerCell
 javascript
  get originalText() {
   return `Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.`
  }
  compile() {
   return super.compile().repeat(this.getWord(1) ? parseInt(this.getWord(1)) : 1)
  }
abstractTopLevelSingleMetaNode
 abstract
 description Use these keywords once per file.
 extends abstractScrollNode
 cells keywordCell
 compiler
  stringTemplate 
permalinkNode
 description When compiling, Scroll will save this article to {permalink}.html
 crux permalink
 extends abstractTopLevelSingleMetaNode
 cells keywordCell permalinkCell
skipIndexPageNode
 description Add this tag if you want to build a page but not include it in the index page.
 crux skipIndexPage
 extends abstractTopLevelSingleMetaNode
titleNode
 catchAllCellType textCell
 description Title of the article.
 extends abstractTopLevelSingleMetaNode
 crux title
 javascript
  compile() {
   return `<h1 class="scrollTitleComponent"><a href="${this.getRootNode().permalink}.html">${this.getContent()}</a></h1>`
  }
dateNode
 catchAllCellType dateCell
 description Date the article was first published.
 extends abstractTopLevelSingleMetaNode
 crux date
maxColumnsNode
 catchAllCellType integerCell
 description Set your own max column count for a single article's generated HTML.
 extends abstractTopLevelSingleMetaNode
 crux maxColumns
columnWidthNode
 catchAllCellType integerCell
 description Set your own column width, in ch units, for the generated HTML.
 extends abstractTopLevelSingleMetaNode
 crux columnWidth
endSnippetNode
 description Insert one of these where you want to cut the article for the snippets.html page.
 extends abstractTopLevelSingleMetaNode
 crux endSnippet
chatNode
 description A dialogue between two people.
 catchAllNodeType chatLineNode
 crux chat
 extends abstractScrollNode
 javascript
  compile() {
   return this.map((line, index) => `<div class="scrollDialogueComponent ${index % 2 ? "scrollDialogueComponentRight" : "scrollDialogueComponentLeft"}"><span>${line.toString()}</span></div>`).join("")
  }
codeNode
 description A code block.
 catchAllNodeType lineOfCodeNode
 extends abstractScrollNode
 javascript
  compile() {
   return `<code class="scrollCodeBlockComponent">${this.childrenToString().replace(/\</g, "&lt;")}</code>`
  }
 crux code
codeWithLanguageNode
 description Use this to specify the language of the code block, such as csvCode or rustCode.
 extends codeNode
 pattern ^[a-zA-Z0-9_]+Code$
belowAsCodeNode
 description Print the Scroll code of the next node.
 extends abstractScrollNode
 crux belowAsCode
 javascript
  get target() {
   return this.getNext()
  }
  compile() {
   return `<code class="scrollCodeBlockComponent">${this.target.toString().replace(/\</g, "&lt;")}</code>`
  }
aboveAsCodeNode
 description Print the Scroll code for the previous node.
 extends belowAsCodeNode
 crux aboveAsCode
 javascript
  get target() {
   return this.getPrevious()
  }
commentNode
 description Will not appear in the compiled HTML.
 catchAllCellType commentCell
 extends abstractScrollNode
 crux comment
 javascript
  compile() {
   return ``
  }
 catchAllNodeType commentLineNode
cssNode
 extends abstractScrollNode
 description Prints CSS content wrapped in a style tag.
 crux css
 extends abstractScrollNode
 catchAllNodeType cssLineNode
 javascript
  compile() {
   return `<style>${this.childrenToString()}</style>`
  }
abstractHeaderNode
 catchAllCellType textCell
 extends abstractScrollNode
 catchAllNodeType multilineTitleNode
 javascript
  compile() {
   const children = this.childrenToString() ? " " + this.childrenToString() : ""
   return `<${this.tag} class="${this.className}">${this.getContent() + children}</${this.tag}>`
  }
sectionNode
 description Compiles to an h3 tag.
 extends abstractHeaderNode
 crux section
 javascript
  tag = "h3"
  className = "scrollSectionComponent"
subsectionNode
 description Compiles to an h4 tag.
 extends abstractHeaderNode
 crux subsection
 javascript
  tag = "h4"
  className = "scrollSubsectionComponent"
questionNode
 description Use for pages like FAQs.
 extends abstractHeaderNode
 crux question
 javascript
  tag = "h4"
  className = "scrollQuestionComponent"
htmlNode
 description A catch all block to drop in any loose html.
 crux html
 extends abstractScrollNode
 catchAllNodeType htmlLineNode
 javascript
  compile() {
   return `${this.childrenToString()}`
  }
imageNode
 description An img tag.
 cells keywordCell urlCell
 extends abstractScrollNode
 crux image
 inScope imageCaptionNode
 javascript
  compile() {
   const src = this.getWord(1)
   let imgTag = ""
   try {
    const sizeOf = require("image-size")
    const dimensions = sizeOf(src)
    const width = dimensions.width
    const height = dimensions.height
    imgTag = `<img src="${src}" width="${width}" height="${height}" loading="lazy"/>`
   } catch (err) {
    console.error(err)
    imgTag = `<img src="${src}">`
   }
   const caption = this.get("caption")
   const captionFig = caption ? `<figcaption>${caption}</figcaption>` : ""
   return `<figure class="scrollImageComponent"><a href="${src}" target="_blank">${imgTag}</a>${captionFig}</figure>`
  }
customHeaderNode
 extends abstractScrollNode
 description Define a header for a certain page. Setting to blank will also remove the header on a page.
 crux header
 catchAllNodeType stumpNode
 javascript
  compile() {
   return ""
  }
customFooterNode
 extends abstractScrollNode
 description Define a footer for a certain page. Setting to blank will also remove the footer on a page.
 crux footer
 catchAllNodeType stumpNode
 javascript
  compile() {
   return ""
  }
listNode
 description An unordered list.
 catchAllNodeType listItemNode
 crux list
 extends abstractScrollNode
 compiler
  stringTemplate 
  openChildren <ul class="scrollUnorderedListComponent">
  closeChildren </ul>
orderedListNode
 description An ordered list.
 extends listNode
 crux orderedList
 compiler
  stringTemplate 
  openChildren <ol class="scrollOrderedListComponent">
  closeChildren </ol>
paragraphNode
 description Prose content.
 catchAllNodeType paragraphContentNode
 extends abstractScrollNode
 crux paragraph
 javascript
  get paragraphContent() {
   return this.childrenToString()
  }
  compile() {
   return `<p class="scrollParagraphComponent">${this.getRootNode().compileATags(this.paragraphContent)}</p>`
  }
quoteNode
 description A blockquote.
 catchAllNodeType quoteLineNode
 extends abstractScrollNode
 javascript
  compile() {
   return `<blockquote class="scrollQuoteComponent">${this.childrenToString()}</blockquote>`
  }
 crux quote
abstractTableNode
 catchAllNodeType rowNode
 extends abstractScrollNode
 javascript
  _delimiter = " "
  get tableHeader() {
   return this.columns.filter(col => !col.isLink).map(column => `<th>${column.name}</th>\n`)
  }
  get columns() {
   const header = this.nodeAt(0)
   const cols = header ? header.getLine().split(this._delimiter) : []
   return cols.map((name, index) => {
    const isLink = name.endsWith("Link")
    const linkIndex = cols.indexOf(name + "Link")
    return {
     name,
     isLink,
     linkIndex
    }
   })
  }
  getTableBody() {
   const delimiter = this._delimiter
   return this.getTopDownArray()
    .slice(1)
    .map(node => `<tr>${node.toRow(this.columns, delimiter)}</tr>`)
    .join("\n")
  }
  compile() {
   return `<table class="scrollTableComponent"><thead><tr>${this.tableHeader.join("\n")}</tr></thead>\n<tbody>${this.getTableBody()}</tbody></table>`
  }
commaTableNode
 crux commaTable
 description Comma separated values table.
 extends abstractTableNode
 javascript
  _delimiter = ","
pipeTableNode
 crux pipeTable
 description Pipie separated values table.
 extends abstractTableNode
 javascript
  _delimiter = "|"
tabTableNode
 crux tabTable
 description Tab separated values table.
 extends abstractTableNode
 javascript
  _delimiter = "\t"
spaceTableNode
 description Space separated values table. Last column is a catch all.
 extends abstractTableNode
 crux spaceTable
abstractAftertextAttributeNode
 cells keywordCell
 boolean isAttributeNode true
 javascript
  get divAttributes() {
   return `${this.getWord(0)}="${this.getContent()}"`
  }
  compile() {
   return ""
  }
aftertextIdNode
 crux id
 description Provide an ID to be output in the generated HTML paragraph.
 extends abstractAftertextAttributeNode
 cells keywordCell htmlIdCell
 single
abstractAftertextDirectiveNode
 cells keywordCell
 catchAllCellType textCell
 javascript
  isMarkupNode = true
  get pattern() {
   return this.getWordsFrom(1).join(" ")
  }
  get shouldMatchAll() {
   return this.has("matchAll")
  }
  getMatches(text) {
   const { pattern } = this
   const escapedPattern = pattern.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&")
   return [...text.matchAll(new RegExp(escapedPattern, "g"))].map(match => {
    const { index } = match
    const endIndex = index + pattern.length
    return [
     { index, string: `<${this.openTag}${this.allAttributes}>`, endIndex },
     { index: endIndex, endIndex, string: `</${this.closeTag}>` }
    ]
   })
  }
  getInserts(text) {
   const matches = this.getMatches(text)
   if (!matches.length) return false
   if (this.shouldMatchAll) return matches.flat()
   const indexNode = this.getNode("match")
   if (indexNode)
    return indexNode.indexes
     .map(index => matches[index])
     .filter(i => i)
     .flat()
   return matches[0]
  }
  get allAttributes() {
   const attr = this.attributes.join(" ")
   return attr ? " " + attr : ""
  }
  get attributes() {
   return []
  }
  get openTag() {
   return this.tag
  }
  get closeTag() {
   return this.tag
  }
abstractMarkupNode
 extends abstractAftertextDirectiveNode
 inScope abstractMarkupParameterNode
boldNode
 crux bold
 extends abstractMarkupNode
 javascript
  tag = "b"
italicsNode
 crux italics
 extends abstractMarkupNode
 javascript
  tag = "i"
underlineNode
 crux underline
 extends abstractMarkupNode
 javascript
  tag = "u"
aftertextCodeNode
 crux code
 extends abstractMarkupNode
 javascript
  tag = "code"
linkNode
 extends abstractMarkupNode
 cells keywordCell urlCell
 inScope linkNoteNode
 crux link
 javascript
  tag = "a"
  get link() {
   return this.getWord(1)
  }
  get attributes() {
   const attrs = [`href="${this.link}"`]
   const title = this.getNode("note")
   if (title) attrs.push(`title="${title.childrenToString().replace(/\n/g, " ")}"`)
   return attrs
  }
  get pattern() {
   return this.getWordsFrom(2).join(" ")
  }
emailLinkNode
 description A mailto link
 crux email
 extends linkNode
 javascript
  get attributes() {
   return [`href="mailto:${this.link}"`]
  }
quickLinkNode
 pattern ^https\:
 extends linkNode
 cells urlCell
 javascript
  get link() {
   return this.getWord(0)
  }
  get pattern() {
   return this.getWordsFrom(1).join(" ")
  }
classMarkupNode
 description Add a span with a class name around matching text.
 extends abstractMarkupNode
 cells keywordCell classNameCell
 crux class
 javascript
  tag = "span"
  get className() {
   return this.getWord(1)
  }
  get attributes() {
   return [`class="${this.className}"`]
  }
  get pattern() {
   return this.getWordsFrom(2).join(" ")
  }
caveatNode
 description Add a caveat viewable on hover on matching text. When you want to be sure you've thoroughly addressed obvious concerns but ones that don't warrant to distract from the main argument of the text.
 crux caveat
 extends classMarkupNode
 cells keywordCell
 javascript
  get pattern() {
   return this.getWordsFrom(1).join(" ")
  }
  get attributes() {
   return [`class="scrollCaveat"`, `title="${this.caveatText}"`]
  }
  get caveatText() {
   return this.childrenToString().replace(/\n/g, " ")
  }
strikethroughNode
 crux strikethrough
 extends abstractMarkupNode
 javascript
  tag = "s"
wrapsNode
 crux wrapsOn
 description Enable `code`, *bold*, and _italics_ rules.
 extends abstractAftertextDirectiveNode
 javascript
  get shouldMatchAll() {
   return true
  }
  getMatches(text) {
   return [this.runPattern(text, /\`[^\`]+\`/g, "<code>", "</code>"), this.runPattern(text, /\*[^\*]+\*/g, "<strong>", "</strong>"), this.runPattern(text, /\_[^\_]+\_/g, "<em>", "</em>")].filter(i => i).flat()
  }
  runPattern(text, pattern, openTag, closeTag) {
   return [...text.matchAll(pattern)].map(match => {
    const { index } = match
    const endIndex = index + match[0].length
    return [
     { index, string: openTag, endIndex, consumeStartCharacters: 1 },
     { index: endIndex, endIndex, string: closeTag, consumeEndCharacters: 1 }
    ]
   })
  }
datelineNode
 crux dateline
 description Gives your paragraph a dateline like "December 15, 2021 — The..."
 extends abstractAftertextDirectiveNode
 javascript
  getInserts() {
   let day =
    this.getContent() ||
    this.getParent()
     .getParent()
     .get("date")
   if (!day) return false
   try {
    const dayjs = require("dayjs")
    day = dayjs(day).format(`MMMM D, YYYY`)
   } catch (err) {
    console.error(err)
   }
   return [{ index: 0, string: `<span class="scrollArticleDateComponent">${day} — </span>` }]
  }
abstractMarkupParameterNode
 cells keywordCell
matchAllNode
 description Use this to match all occurrences of the text.
 extends abstractMarkupParameterNode
 crux matchAll
matchNode
 catchAllCellType integerCell
 description Use this to specify which index(es) to match.
 javascript
  get indexes() {
   return this.getWordsFrom(1).map(num => parseInt(num))
  }
 example
  aftertext
   hello ello ello
   bold ello
    match 0 2
 extends abstractMarkupParameterNode
 crux match
linkNoteNode
 description When you want to include more information than just the link to your reference.
 crux note
 cells keywordCell
 example
  aftertext
   This report showed the treatment had a big impact.
  https://example.com/report This report.
   note
    The average growth in the treatment group was 14.2x higher than the control group.
 baseNodeType blobNode
 compiler
  stringTemplate 
errorNode
 baseNodeType errorNode
scrolldownNode
 extensions scroll
 description A simple language for structurable thought. An extensible alternative to Markdown. Compiles to HTML.
 root
 inScope abstractScrollNode blankLineNode
 catchAllNodeType quickParagraphNode
 compilesTo html
 javascript
  get permalink() {
   return this.get("permalink") || this._permalink || ""
  }
  setPermalink(permalink) {
   this._permalink = permalink
   return this
  }
  compileATags(text) {
   // todo: a better place for these util functions? I stick them in here so the
   // grammar is all in one file for ease of use in TreeLanguageDesigner
   const linkReplacer = (match, p1, p2, p3, offset, str) => {
    let suffix = ""
    if (p3.endsWith(",")) suffix = "," + suffix
    if (p3.endsWith(".")) suffix = "." + suffix
    p3 = p3.replace(/(,|\.)$/, "")
    let prefix = "https://"
    const isRelativeLink = p3.startsWith("./")
    if (isRelativeLink) {
     prefix = ""
     p3 = p3.substr(2)
    }
    if (p3.startsWith("https://") || p3.startsWith("http://")) prefix = ""
    return `${p1}<a href="${prefix}${p3}">${p2}</a>${suffix}`
   }
   return text.replace(/(^|\s)(\S+)🔗(\S+)(?=(\s|$))/g, linkReplacer)
  }
 example
  title Hello world
  section This is Scrolldown
  
  paragraph
   It compiles to HTML. Blank lines get turned into brs.
  
  code
   // You can add code as well.
   print("Hello world")
blankLineNode
 description Blank lines compile to nothing in the HTML.
 cells blankCell
 compiler
  stringTemplate 
 pattern ^$
 tags doNotSynthesize
quickParagraphNode
 description A catch all block. This may be removed in future versions.
 catchAllCellType textCell
 baseNodeType errorNode
 compiler
  stringTemplate <p class="scrollParagraphComponent">{textCell}</p>
chatLineNode
 catchAllCellType anyCell
 catchAllNodeType chatLineNode
lineOfCodeNode
 catchAllCellType codeCell
 catchAllNodeType lineOfCodeNode
commentLineNode
 catchAllCellType commentCell
cssLineNode
 catchAllCellType anyCell
 catchAllNodeType cssLineNode
multilineTitleNode
 catchAllCellType textCell
htmlLineNode
 catchAllCellType anyCell
 catchAllNodeType htmlLineNode
imageCaptionNode
 description An optional caption to accompany the image.
 crux caption
 cells keywordCell
 catchAllCellType textCell
stumpNode
 description Stump is a Tree Language that compiles to HTML.
 catchAllCellType anyCell
 catchAllNodeType stumpNode
listItemNode
 cells bulletPointCell
 catchAllCellType textCell
 javascript
  compile() {
   return `<li>${this.getRootNode().compileATags(this.getContent() || "")}</li>`
  }
paragraphContentNode
 catchAllCellType textCell
quoteLineNode
 catchAllCellType anyCell
 catchAllNodeType quoteLineNode
rowNode
 catchAllCellType textCell
 javascript
  toRow(columns, delimiter) {
   const words = this.getLine().split(delimiter)
   let str = ""
   let column = 0
   const columnCount = columns.length
   while (column < columnCount) {
    const col = columns[column]
    column++
    const content = columnCount === column ? words.slice(columnCount - 1).join(" ") : words[column - 1]
    if (col.isLink) continue
    let tagged = ""
    const link = words[col.linkIndex]
    if (col.linkIndex > -1 && link) tagged = `<a href="${link}">${content}</a>`
    else tagged = this.getRootNode().compileATags(content ?? "")
    str += `<td>${tagged}</td>\n`
   }
   return str
  }